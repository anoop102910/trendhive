// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String       @id @default(uuid())
  email                    String       @unique @db.VarChar(255)
  password                 String       @db.VarChar(255)
  name                     String?      @db.VarChar(255)
  avatar                   String?      @db.VarChar(255)
  isEmailVerified          Boolean      @default(false)
  emailVerificationToken   String?      @db.VarChar(255)
  emailVerificationExpires DateTime?
  createdAt                DateTime     @default(now())
  updatedAt                DateTime     @updatedAt
  roles                    Role[]       @relation("UserToRole")
  permissions              Permission[] @relation("UserToPermission")
  image                    String?
  sessions                 Session[]
  accounts                 Account[]
  UserCoupon               UserCoupon[]
  Cart                     Cart[]
  Wishlist                 Wishlist?
  Address                  Address[]
  Order                    Order[]

  @@map("user")
}

model Role {
  id          String       @id @default(uuid())
  name        String       @unique
  description String?
  users       User[]       @relation("UserToRole")
  permissions Permission[] @relation("RoleToPermission")
}

model Permission {
  id          String  @id @default(uuid())
  name        String  @unique
  description String?
  roles       Role[]  @relation("RoleToPermission")
  users       User[]  @relation("UserToPermission")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Category {
  id               String   @id @default(uuid())
  name             String   @unique @db.VarChar(255)
  slug             String   @unique @db.VarChar(255)
  description      String?  @db.Text
  metadata         Json?
  private_metadata Json?
  seoSlug          String?
  seoTitle         String?  @db.VarChar(255)
  seoDescription   String?  @db.Text
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  parentId         String?
  isActive         Boolean  @default(true)

  media   Media?  @relation("CategoryToMedia", fields: [mediaId], references: [id])
  mediaId String?

  parent   Category?  @relation("ParentCategory", fields: [parentId], references: [id])
  children Category[] @relation("ParentCategory")
  Product  Product[]
}

model Media {
  id        String   @id @default(uuid())
  url       String
  alt       String?
  fileName  String?  @unique
  size      Int?
  mimeType  String?
  width     Int?
  height    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String?

  categories Category[] @relation("CategoryToMedia")

  @@map("media")
}

model Product {
  id                String              @id @default(uuid())
  name              String              @unique @db.VarChar(255)
  slug              String              @unique @db.VarChar(255)
  description       String?             @db.Text
  price             Float
  currency          String              @default("IND")
  quantity          Int
  sku               String?             @unique @db.VarChar(255)
  isPublished       Boolean             @default(false)
  isFeatured        Boolean             @default(false)
  metadata          Json?
  private_metadata  Json?
  seoSlug           String?
  seoTitle          String?             @db.VarChar(255)
  seoDescription    String?             @db.Text
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  createdBy         String
  updatedBy         String?
  category          Category?           @relation(fields: [categoryId], references: [id])
  categoryId        String?
  CollectionProduct CollectionProduct[]
  Collection        Collection?         @relation(fields: [collectionId], references: [id])
  collectionId      String?
  ProductAttribute  ProductAttribute[]
  ProductCoupon     ProductCoupon[]
  CartItem          CartItem[]
  WishlistItem      WishlistItem[]
  Discount          Discount?           @relation(fields: [discountId], references: [id])
  discountId        String?
  OrderItem         OrderItem[]
}

model CollectionProduct {
  collectionId String     @map("collection_id")
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  productId    String     @map("product_id")
  product      Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
  sortOrder    Int        @default(0) @map("sort_order")

  @@id([collectionId, productId])
}

model Collection {
  id                 String              @id @default(uuid())
  name               String              @db.VarChar(250)
  slug               String              @unique @db.VarChar(255)
  backgroundImage    String?             @db.VarChar(100)
  backgroundImageAlt String?             @db.VarChar(128)
  description        Json?               @db.Json
  products           Product[]
  collectionProduct  CollectionProduct[]
}

model Attribute {
  id        String           @id @default(cuid())
  name      String // e.g., "Color", "Size"
  values    AttributeValue[] // e.g., "Red", "Blue", "L", "XL"
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

model AttributeValue {
  id          String             @id @default(cuid())
  value       String // e.g., "Red"
  attribute   Attribute          @relation(fields: [attributeId], references: [id])
  attributeId String
  products    ProductAttribute[]
}

model ProductAttribute {
  id               String         @id @default(cuid())
  product          Product        @relation(fields: [productId], references: [id])
  productId        String
  attributeValue   AttributeValue @relation(fields: [attributeValueId], references: [id])
  attributeValueId String
}

enum CouponType {
  FIXED
  PERCENTAGE
}

model Coupon {
  id            String     @id @default(cuid())
  code          String     @unique
  description   String?
  discountType  CouponType
  discountValue Float
  usageLimit    Int?
  usedCount     Int        @default(0)
  startDate     DateTime
  endDate       DateTime
  isActive      Boolean    @default(true)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  assignedUsers UserCoupon[]
  ProductCoupon ProductCoupon[]
}

model UserCoupon {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  coupon     Coupon   @relation(fields: [couponId], references: [id])
  couponId   String
  assignedAt DateTime @default(now())
}

model ProductCoupon {
  id        String  @id @default(cuid())
  product   Product @relation(fields: [productId], references: [id])
  productId String
  coupon    Coupon  @relation(fields: [couponId], references: [id])
  couponId  String
}

model Cart {
  id        String     @id @default(uuid())
  userId    String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  items     CartItem[]
  user      User       @relation(fields: [userId], references: [id])
}

model CartItem {
  id        String   @id @default(uuid())
  quantity  Int
  productId String
  cartId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id])
  cart    Cart    @relation(fields: [cartId], references: [id])

  @@unique([cartId, productId])
}

model Wishlist {
  id        String         @id @default(uuid())
  userId    String         @unique
  createdAt DateTime       @default(now())
  items     WishlistItem[]
  user      User           @relation(fields: [userId], references: [id])
}

model WishlistItem {
  id         String @id @default(uuid())
  productId  String
  wishlistId String

  product  Product  @relation(fields: [productId], references: [id])
  wishlist Wishlist @relation(fields: [wishlistId], references: [id])

  @@unique([wishlistId, productId])
}

model Address {
  id           String   @id @default(uuid())
  addressLine1 String   @db.VarChar(1024)
  addressLine2 String?  @db.VarChar(1024)
  city         String   @db.VarChar(255)
  state        String   @db.VarChar(255)
  postalCode   String   @db.VarChar(20)
  country      String   @db.VarChar(255)
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  Order        Order[]

  @@map("address")
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
  FREE_SHIPPING
}

model Discount {
  id          String       @id @default(uuid())
  name        String       @db.VarChar(255)
  description String?      @db.Text
  type        DiscountType @default(PERCENTAGE)
  value       Float
  startDate   DateTime     @default(now())
  endDate     DateTime?
  isActive    Boolean      @default(true)

  products Product[]

  @@map("discounts")
}

model Order {
  id             String   @id @default(uuid())
  grossAmount    Float
  discountAmount Float    @default(0.00)
  shippingFee    Float    @default(0.00)
  taxAmount      Float    @default(0.00)
  totalAmount    Float
  status         String   @default("PENDING") @db.VarChar(50)
  paymentMethod  String   @db.VarChar(50)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  addressId String
  address   Address @relation(fields: [addressId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [id])

  items OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String   @id @default(uuid())
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orderId String
  order   Order  @relation(fields: [orderId], references: [id])

  productId String
  product   Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}
